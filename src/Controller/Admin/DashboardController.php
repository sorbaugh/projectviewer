<?php

namespace App\Controller\Admin;

use App\Entity\Blocker;
use App\Entity\Contribution;
use App\Entity\Contributor;
use App\Entity\Media;
use App\Entity\Project;
use App\Entity\Task;
use App\Entity\TaskHistory;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class DashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    public function index(): Response
    {
        //return parent::index();

        // Option 1. You can make your dashboard redirect to some common page of your backend
        //
        // $adminUrlGenerator = $this->container->get(AdminUrlGenerator::class);
        // return $this->redirect($adminUrlGenerator->setController(OneOfYourCrudController::class)->generateUrl());

        // Option 2. You can make your dashboard redirect to different pages depending on the user
        //
        // if ('jane' === $this->getUser()->getUsername()) {
        //     return $this->redirect('...');
        // }

        // Option 3. You can render some custom template to display a proper dashboard with widgets, etc.
        // (tip: it's easier if your template extends from @EasyAdmin/page/content.html.twig)
        //
        return $this->render('admin/index.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('Project Viewer');
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Contributors', 'fas fa-user', Contributor::class);
        yield MenuItem::linkToCrud('Projects', 'fas fa-folder-tree', Project::class);
        yield MenuItem::linkToCrud('Tasks', 'fas fa-list-check', Task::class);
        //yield MenuItem::linkToCrud('Media', 'fas fa-list', Media::class);
        yield MenuItem::linkToCrud('Task History', 'fas fa-timeline', TaskHistory::class);
        //yield MenuItem::linkToCrud('Contributions', 'fas fa-list', Contribution::class);
        yield MenuItem::linkToCrud('Blocker', 'fas fa-house-fire', Blocker::class);
    }

    public function configureActions(): Actions
    {
        return parent::configureActions()
            ->add(Crud::PAGE_INDEX, Action::DETAIL); // TODO: Change the autogenerated stub
    }

    public function configureAssets(): Assets
    {
        return parent::configureAssets()
            ->addCssFile('css/admin.css'); // TODO: Change the autogenerated stub
    }


}
